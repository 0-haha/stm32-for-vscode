const _ = require('lodash');
const fs = require('fs');
const fsRecursive = require('recursive-readdir');
const makefileTemplate = require('./makefileTemplate');
const vscode = require('vscode');

async function init() {
  // return listFiles();
  return extractFileTypes().then((output) => {
    console.log('files has been extracted');
    console.log(output);
  });
  // console.log(await listFiles());
  // console.log('finished');
}

async function extractMakeFileInfo(makefilePath) {
  /*
   * Should extract the following information
   * target
   * cpu
   * fpu
   * float-abi
   * mcu
   * c sources
   * cpp sources
   * asm sources
   * asm definitions
   * c definitions
   * as includes
   * c includes
   * linkerscript???
   * if generated by cubemx or stm32 for vscode
  */

}

async function extractFileTypes() {
  /*
   * Should get:
    - Makefile
    - c source
    - cpp sources
    - asm source
    - linker script
    - c includes
  */
  return listFiles().then((fileList) => {
    const output = {
      'makefile': extracType(fileList, 'Makefile'),
      'linkerScript': extracType(fileList, 'ld'),
      'cSources': extracType(fileList, 'c'),
      'cppSources': extracType(fileList, 'cpp'),
      'asmSources': extracType(fileList, 's'),
      'cIncludes': extracType(fileList, 'h'),
    };

    return output;
  }).catch( (err) => {
    return new Error('something went wrong while retrieving the file list in your workspace', err);
  });

}


function extracType(fileList, type) {
  const list = [];

  _.forEach(fileList, (item) => {
    const extension = item.split('.').pop();

    if(extension === type) {
      list.push(item);
    }
  });
  return list;
}


/*
 * Returns an array of all the files in the workspace folder.
*/
function listFiles() {
  return new Promise((resolve, reject) => {
    fsRecursive(`${vscode.workspace.rootPath}`, (err, files) => {
      if(err) {
        reject(err);
        return;
      }
      resolve(files);
    });
  });
}

module.exports = {
  init,
  listFiles,
  extractFileTypes,
}