"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringList = createStringList;
exports.convertTemplate = convertTemplate;
exports["default"] = createMakefile;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Set of functions for creating a makefile based on STM32 makefile info and the Src, Inc and Lib folders
 * Created by Jort Band - Bureau Moeilijke Dingen
*/
// TODO: include the openocd path to the makeInfo.

/**
 * @description creates a makefile readable list.
 * @param {string[]} arr
 */
function createStringList(arr) {
  // guard against singular entries.
  if (!_lodash["default"].isArray(arr)) {
    if (_lodash["default"].isString(arr)) return arr;
    return '';
  }

  var output = '';

  _lodash["default"].map(arr, function (entry, ind) {
    output += "".concat(entry);

    if (ind < arr.length - 1) {
      output += ' \\';
    }

    output += '\n';
  });

  return output;
}

function convertTemplate(makeInfo) {
  // NOTE: check for the correct info needs to be given beforehand
  var makeFile = "##########################################################################################################################\n# File automatically-generated by STM32forVSCode: [projectgenerator] version: [3.0.0] date: [Fri Jan 25 18:00:27 CET 2019]\n##########################################################################################################################\n\n# ------------------------------------------------\n# Generic Makefile (based on gcc)\n#\n# ChangeLog :\n#\t2017-02-10 - Several enhancements + project update mode\n#   2015-07-22 - first version\n# ------------------------------------------------\n\n######################################\n# target\n######################################\nTARGET = ".concat(makeInfo.target, "\n\n\n######################################\n# building variables\n######################################\n# debug build?\nDEBUG = 1\n# optimization\nOPT = -Og\n\n\n#######################################\n# paths\n#######################################\n# Build path\nBUILD_DIR = build\n\n######################################\n# source\n######################################\n# C sources\nC_SOURCES =  ", '\\', "\n").concat(createStringList(makeInfo.cSources), "\n\nCPP_SOURCES = ", '\\', "\n").concat(createStringList(makeInfo.cxxSources), "\n\n# ASM sources\nASM_SOURCES =  ", '\\', "\n").concat(createStringList(makeInfo.asmSources), "\n\n\n#######################################\n# binaries\n#######################################\nPREFIX = arm-none-eabi-\n# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)\n# either it can be added to the PATH environment variable.\nifdef GCC_PATH\nCXX = $(GCC_PATH)/$(PREFIX)g++\nCC = $(GCC_PATH)/$(PREFIX)gcc\nAS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp\nCP = $(GCC_PATH)/$(PREFIX)objcopy\nSZ = $(GCC_PATH)/$(PREFIX)size\nelse\nCXX = $(PREFIX)g++\nCC = $(PREFIX)gcc\nAS = $(PREFIX)gcc -x assembler-with-cpp\nCP = $(PREFIX)objcopy\nSZ = $(PREFIX)size\nendif\nHEX = $(CP) -O ihex\nBIN = $(CP) -O binary -S\n\t\n#######################################\n# CFLAGS\n#######################################\n# cpu\nCPU = ").concat(makeInfo.cpu, "\n\n# fpu\nFPU = ").concat(makeInfo.fpu, "\n\n# float-abi\nFLOAT-ABI = ").concat(makeInfo.floatAbi, "\n\n# mcu\nMCU = ").concat(makeInfo.mcu, "\n\n# macros for gcc\n# AS defines\nAS_DEFS = \n\n# C defines\nC_DEFS =  ", '\\', "\n").concat(createStringList(makeInfo.cDefs), "\n\n\n# AS includes\nAS_INCLUDES = ", '\\', "\n").concat(createStringList(makeInfo.asmIncludes), "\n\n# C includes\nC_INCLUDES =  ", '\\', "\n").concat(createStringList(makeInfo.cIncludes), "\n\n\n# compile gcc flags\nASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections\n\nCFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections\n\nifeq ($(DEBUG), 1)\nCFLAGS += -g -gdwarf-2\nendif\n\n\n# Generate dependency information\nCFLAGS += -MMD -MP -MF\"$(@:%.o=%.d)\"\n\nCXXFLAGS?=\nCXXFLAGS += -feliminate-unused-debug-types\n\n#######################################\n# LDFLAGS\n#######################################\n# link script\nLDSCRIPT = ").concat(makeInfo.ldscript, "\n\n# libraries\nLIBS = -lc -lm -lnosys \nLIBDIR = \nLDFLAGS = $(MCU) -specs=nosys.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections\n\n# default action: build all\nall: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin\n\n\n#######################################\n# build the application\n#######################################\n# list of cpp program objects\nOBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))\nvpath %.cpp $(sort $(dir $(CPP_SOURCES)))\n# list of C objects\nOBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))\nvpath %.c $(sort $(dir $(C_SOURCES)))\n# list of ASM program objects\nOBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))\nvpath %.s $(sort $(dir $(ASM_SOURCES)))\n\n$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) \n\t$(CXX) -c $(CXXFLAGS) $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@\n\n$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) \n\t$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@\n\n$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)\n\t$(AS) -c $(CFLAGS) $< -o $@\n\n$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile\n\t$(CC) $(OBJECTS) $(LDFLAGS) -o $@\n\t$(SZ) $@\n\n$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)\n\t$(HEX) $< $@\n\t\n$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)\n\t$(BIN) $< $@\t\n\t\n$(BUILD_DIR):\n\tmkdir $@\t\t\n\n#######################################\n# flash\n#######################################\nflash: $(BUILD_DIR)/$(PROJ_NAME).elf\n        ").concat(makeInfo.openocdPath ? makeInfo.openocdPath : 'openocd', " -f target/").concat(makeInfo.targetMCU, " -c \"program $^ reset exit -0x08000000\"\n\n#######################################\n# erase\n#######################################\nerase: $(BUILD_DIR)/$(PROJ_NAME).elf\n        ").concat(makeInfo.openocdPath ? makeInfo.openocdPath : 'openocd', " -f target/").concat(makeInfo.targetMCU, ".cfg -c \"init; reset halt; ").concat(makeInfo.targetMCU, " mass_erase 0; exit\"\n\n#######################################\n# clean up\n#######################################\nclean:\n\t-rm -fR $(BUILD_DIR)\n\t\n#######################################\n# dependencies\n#######################################\n-include $(wildcard $(BUILD_DIR)/*.d)\n\n# *** EOF ***");
  return makeFile;
}

function createMakefile(info) {
  return convertTemplate(info);
}