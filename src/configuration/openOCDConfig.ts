import * as Helpers from '../Helpers';
import * as path from 'path';
import * as vscode from 'vscode';

import { OpenOCDConfigurationInterface } from '../types';

/**
 * Creates an openocd configuration file string. 
 * @param config openocd configuration
 */
export function create(config: OpenOCDConfigurationInterface): string {
  const openocdConfig = `#OpenOCD configuration file, generated by STM32 for VSCode

# Programmer, can be changed to several interfaces
# Standard will be the stlink interface as this is the standard for STM32 dev boards
source [find interface/${config.interface}.cfg]

# The target MCU. This should match your board
source [find target/${config.targetMCU}.cfg]
`;
  return openocdConfig;
}


/**
 * Write the openocd configuration to the workspace
 * @param configuration openocd configuration file 
 */
export async function write(configuration: string): Promise<void> {
  const workspaceUri = Helpers.getWorkspaceUri();
  if (!workspaceUri) { return Promise.resolve(); }
  return Helpers.writeFileInWorkspace(workspaceUri, 'openocd.cfg', configuration);
}

export async function read(): Promise<string> {
  const workspaceUri = Helpers.getWorkspaceUri();
  if (!workspaceUri) { return Promise.reject(new Error('No open workspace')); }
  const configPath = path.resolve(workspaceUri.fsPath, 'openocd.cfg');
  try {
    const file = await vscode.workspace.fs.readFile(vscode.Uri.file(configPath));
    const configFile = Buffer.from(file).toString('utf-8');
    return Promise.resolve(configFile);
  } catch (error) {
    return Promise.reject(error);
  }
}

export function readOrCreateConfigFile(config: OpenOCDConfigurationInterface): Promise<void> {
  const workspaceFolder = Helpers.getWorkspaceUri();
  if (!workspaceFolder) { return Promise.resolve(); }
  return (new Promise((resolve, reject) => {
    read().then(() => {
      // do nothing
      resolve();
    }).catch(() => {
      // no config is present. Create one.
      const configuration = create(config);
      write(configuration).then(() => {
        resolve();
      }).catch((error) => {
        vscode.window.showErrorMessage(
          `Something went wrong while creating the openocd configuration file. Error: ${error}`
        );
        reject(error);
      });
    });
  }));
}

/**
 * Function for reading the current file and only changing the programmer in that configuration file.
 * @param programmer the string for the openocd programmer.
 */
export function changeProgrammer(programmer: string): Promise<void> {
  const regexPattern = /(?<=source\s*\[find\s+interface\/)[\w-_]+\.cfg/g;
  return new Promise((resolve, reject) => {
    read().then((configuration) => {
      const newConfig = configuration.replace(regexPattern, `${programmer}.cfg`);
      write(newConfig).then(() => {
        resolve();
      }).catch((error) => {
        console.error('Something went wrong when writing the new openocd configuration file', error);
        vscode.window.showErrorMessage(
          `Something went wrong when writing the new openocd configuration file. Error: ${error}`
        );
        reject(error);
      });
    }).catch((error) => {
      console.error('Something went wrong when reading the openocd config file for changing the programmer', error);
      vscode.window.showErrorMessage(
        `Something went wrong wen reading the openocd config file for changing the programmer. Error: ${error}`
      );
      reject(error);
    });
  });

}